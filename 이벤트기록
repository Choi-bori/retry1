import pandas as pd

#경기정보 불러오기
dataset_name = 'World_Cup'
match_df = pd.read_csv(f'data/refined_events/{dataset_name}/matches.csv', index_col=0, encoding='utf-8-sig')
match_df

#경기정보 필터링
match_df[(match_df['team1_name'] == 'Korea Republic') | (match_df['team2_name'] == 'Korea Republic')]

#경기 이벤트데이터 불러오기
match_id = 2057988
match_events = pd.read_pickle(f'data/refined_events/{dataset_name}/{match_id}.pkl')
match_events

#열인덱싱
match_events['player_name']

#행인덱싱
match_events.loc[0]


# 필터링 / 불린인덱싱
match_events[match_events['event_type'] == 'Shot'].head()
match_events[match_events['player_name'] == 'Son Heung-Min'].head()

#중복제거       by unique -> Series 중복 제거
match_events['period'].unique()
match_events['team_name'].unique()
match_events['player_name'].unique()

#행 중복제거    by drop_duplicates  -> dataFrame 행 중복제거
match_events[['team_id', 'team_name', 'player_id', 'player_name']].drop_duplicates()#.sort_values('team_id')
match_events[['event_type', 'sub_event_type']].drop_duplicates()#.sort_values(['event_type', 'sub_event_type'])


#List 원소를 집합으로 변환하여 중복제거

match_events['tags'].sum()
set(match_events['tags'].sum())

#선수교체 이벤트
match_events[match_events['event_type'] == 'Substitution'].head()


#미션)
#경기 이벤트 데이터에서 슈팅 이벤트만 필터링한 후, 슈팅 이벤트에는 어떤 정류의 태그들이 달려있는지 중복제거를 통해 확인해보세요
set(match_events[match_events['event_type']=='Shot']['tags'].sum())


#---------------------------------------------------------------------
#1-3

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from src.plot_utils import *

match_id = 2057988
match_events = pd.read_pickle(f'data/refined_events/World_Cup/{match_id}.pkl')
match_events

#이벤트 위치 시각화 by scatter plot

team1_name, team2_name = match_events['team_name'].unique()
team1_events = match_events[match_events['team_name'] == team1_name]
team2_events = match_events[match_events['team_name'] == team2_name]

plt.scatter(team1_events['start_x'], team1_events['start_y'], c='blue')
plt.scatter(team2_events['start_x'], team2_events['start_y'], c='red')
plt.show()


#경기장 위치 시각화
draw_pitch(pitch='white', line='black')
draw_pitch(pitch='darkgreen', line='white')


#공격 방향 회전 
team2_events[['start_x', 'end_x']] = 104 - team2_events[['start_x', 'end_x']]
team2_events[['start_y', 'end_y']] = 68 - team2_events[['start_y', 'end_y']]





# 경기장 위 이벤트 발생 위치 시각화
draw_pitch('white', 'black')

plt.scatter(
    team1_events['start_x'], team1_events['start_y'], c='blue', edgecolors='k', alpha=0.7,
    label=f'{team1_name}: {len(team1_events)} events'
)
plt.scatter(
    team2_events['start_x'], team2_events['start_y'], marker='s', c='red', edgecolors='k', alpha=0.7,
    label=f'{team2_name}: {len(team2_events)} events'
)
plt.legend(fontsize=20, bbox_to_anchor=(1, 1))      #범례

# plt.savefig('img/event_scatter.png', bbox_inches='tight')
plt.show()



#패스 경로 시각화 by arrow
pass_records = match_events[
    (match_events['event_type'] == 'Pass') |                   #오픈 플레이에서 발생한 패스만 필터링 
    (match_events['sub_event_type'].isin(['Free kick', 'Free kick cross', 'corner']))   #세트피스에서 발생한 패스 포함
]
team1_pass_records = pass_records[pass_records['team_name'] == team1_name]
team2_pass_records = pass_records[pass_records['team_name'] == team2_name]

draw_pitch('white', 'black')

plt.scatter(
    team1_pass_records['start_x'], team1_pass_records['start_y'], marker='s', c='blue', alpha=0.7,
    label=f'{team1_name}: {len(team1_pass_records)} passes'
)
plt.scatter(
    team2_pass_records['start_x'], team2_pass_records['start_y'], marker='s', c='red', alpha=0.7,
    label=f'{team2_name}: {len(team2_pass_records)} passes'
)

#arrow 함수는 한번에 하나의 화살표만 시각화 가능 <- 반복문으로 해결 
for i, record in pass_records.iterrows():
    x = record['start_x']
    y = record['start_y']
    dx = record['end_x'] - x
    dy = record['end_y'] - y
    color = 'blue' if record['team_name'] == team1_name else 'red'
    plt.arrow(x, y, dx, dy, width=0.3, head_width=1.5, color=color, alpha=0.5)

plt.legend(fontsize=20, bbox_to_anchor=(1, 1))

# plt.savefig('img/pass_arrow.png', bbox_inches='tight')
plt.show()



#------------------------------------------------------
#반응형 시각화 

#초단위 -> 분 / 초 단위 변환
match_events['display_time'] = match_events.apply(
    lambda x: f"{x['period']} {int(x['time'] // 60):02d}:{int(x['time'] % 60):02d}", axis=1
)
match_events




#
match_title = f'{team1_name} - {team2_name}'
#마우스에 어떤 정보를 보일것인지 
label_func = lambda x: f"{x['event_type']} by {x['player_name']}, {x['display_time']}"

#scatter object
team1_events = match_events[match_events['team_name'] == team1_name]
team1_trace = go.Scatter(
    x=team1_events['start_x'],                         #점 위치
    y=team1_events['start_y'],
    name=team1_name,
    text=team1_events.apply(label_func, axis=1),       #보여질 레이블
    mode='markers',
    marker=dict(size=8, color='blue')                   #점 디자인
)

team2_events = match_events[match_events['team_name'] == team2_name]
team2_events[['start_x', 'end_x']] = 104 - team2_events[['start_x', 'end_x']]       #회전
team2_events[['start_y', 'end_y']] = 68 - team2_events[['start_y', 'end_y']]

team2_trace = go.Scatter(
    x=team2_events['start_x'],
    y=team2_events['start_y'],
    name=team2_name,
    text=team2_events.apply(label_func, axis=1),
    mode='markers',
    marker=dict(size=8, color='red', symbol='square')
)


fig = go.Figure(data=[team1_trace, team2_trace], layout=get_pitch_layout(match_title))
fig.show()



#이벤트 타입 별 반응형시각화
def plot_events(events, col_name, group_dict, event_type='all', rotate_team2_events=False):
    if event_type == 'all':
        match_title = f'{team1_name} - {team2_name}'
    else:
        events = events[events['event_type'] == event_type]
        match_title = f'{team1_name} - {team2_name} ({event_type})'

    if rotate_team2_events:
        events = events.copy()
        team2_idx = events['team_name'] == team2_name
        events.loc[team2_idx, ['start_x', 'end_x']] = 104 - events.loc[team2_idx, ['start_x', 'end_x']]
        events.loc[team2_idx, ['start_y', 'end_y']] = 68 - events.loc[team2_idx, ['start_y', 'end_y']]

    label_func = lambda x: f"{x['event_type']} by {x['player_name']}, {x['display_time']}"
    trace_list = []

    for group_name, color in group_dict.items():
        group_events = events[events[col_name] == group_name]
        trace = go.Scatter(
            x=group_events['start_x'],
            y=group_events['start_y'],
            text=group_events.apply(label_func, axis=1),
            mode='markers',
            marker=dict(size=8, color=color, symbol='square')
        )
        trace['name'] = group_name
        trace_list.append(trace)

    fig = go.Figure(data=trace_list, layout=get_pitch_layout(match_title))
    fig.show() .encording='cp949'



#양팀 슈팅 시각화
group_dict = {'Korea Republic': 'red', 'Germany': 'blue'}
plot_events(match_events, 'team_name', group_dict, event_type='Shot', rotate_team2_events=True)




#주요 선수 패스 위치 시각화
match_events['player_name'].unique()            #unique로 명단 확인

group_dict = {
    'Son Heung-Min': 'red', 'Jae-Sung Lee': 'hotpink',
    'M. Hummels': 'blue', 'T. Kroos': 'black'
}
plot_events(match_events, col_name='player_name', group_dict=group_dict, event_type='Pass')
plt.show()




#----------------------------------------------------------
#이벤트 히트맵 시각화               대회 전체 데이터 이용.

#데이터 불러오기
dataset_name = 'World_Cup'
match_df = pd.read_csv(f'data/refined_events/{dataset_name}/matches.csv', index_col=0, encoding='utf-8-sig')
match_df


#대회 전체 이벤트 data frame생성
match_events_list = []

for match_id in match_df.index:
    match_events = pd.read_pickle(f'data/refined_events/World_Cup/{match_id}.pkl')
    match_events_list.append(match_events)

events = pd.concat(match_events_list, ignore_index=True)
events


#특정 선수 히트맵 산출
player_events = events[events['player_name'] == 'Son Heung-Min']
x = player_events['start_x']
y = player_events['start_y']
heatmap, xedges, yedges = np.histogram2d(y, x, bins=(3, 6), range=[[0, 68], [0, 104]])
heatmap, xedges, yedges


plt.figure(figsize=(10, 6))
plt.imshow(heatmap)
plt.show()


#경기장 위 오버레이
fig, ax = draw_pitch('white', 'black')

img = ax.imshow(heatmap[::-1],                          #y축 뒤집기
                 extent=[0, 104, 0, 68],                #경기장과 히트맵 사이즈 맞추기
                 vmin=0, cmap='Reds', alpha=0.8)  

cbar = fig.colorbar(img, ax=ax)
cbar.ax.tick_params(labelsize=15)
cbar.set_label(label='Number of events', size=20)
plt.show()
# plt.savefig('img/player_event_heatmap.png', bbox_inches='tight')      #이미지 저장 코드





#대회 전체의 모든 슈팅 히트맵 시각화

shot_records = events[events['event_type'] == 'Shot']
x = shot_records['start_x']
y = shot_records['start_y']
heatmap, xedges, yedges = np.histogram2d(y, x, bins=(34, 52), range=[[0, 68], [0, 104]])

fig, ax = draw_pitch('white', 'black')
img = ax.imshow(heatmap[::-1], extent=[0, 104, 0, 68], vmin=0, vmax=15, cmap='jet', alpha=0.8)

cbar = fig.colorbar(img, ax=ax)
cbar.ax.tick_params(labelsize=15)
cbar.set_label(label='Number of shots', size=20)

plt.savefig('img/shot_heatmap.png', bbox_inches='tight')
plt.show()
